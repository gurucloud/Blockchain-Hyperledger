"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperledgerFabricNode = exports.STARTER_INSTANCE_TYPES = exports.InstanceType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
const cdk = require("aws-cdk-lib");
const managedblockchain = require("aws-cdk-lib/aws-managedblockchain");
const customresources = require("aws-cdk-lib/custom-resources");
const constructs = require("constructs");
const network = require("./network");
const utilities = require("./utilities");
/**
 * Supported instance types for Managed Blockchain nodes
 */
var InstanceType;
(function (InstanceType) {
    InstanceType["BURSTABLE3_SMALL"] = "bc.t3.small";
    InstanceType["BURSTABLE3_MEDIUM"] = "bc.t3.medium";
    InstanceType["BURSTABLE3_LARGE"] = "bc.t3.large";
    InstanceType["BURSTABLE3_XLARGE"] = "bc.t3.xlarge";
    InstanceType["STANDARD5_LARGE"] = "bc.m5.large";
    InstanceType["STANDARD5_XLARGE"] = "bc.m5.xlarge";
    InstanceType["STANDARD5_XLARGE2"] = "bc.m5.2xlarge";
    InstanceType["STANDARD5_XLARGE4"] = "bc.m5.4xlarge";
    InstanceType["COMPUTE5_LARGE"] = "bc.c5.large";
    InstanceType["COMPUTE5_XLARGE"] = "bc.c5.xlarge";
    InstanceType["COMPUTE5_XLARGE2"] = "bc.c5.2xlarge";
    InstanceType["COMPUTE5_XLARGE4"] = "bc.c5.4xlarge";
})(InstanceType = exports.InstanceType || (exports.InstanceType = {}));
/**
 * Valid instance types for starter networks
 */
exports.STARTER_INSTANCE_TYPES = [
    InstanceType.BURSTABLE3_SMALL,
    InstanceType.BURSTABLE3_MEDIUM,
];
/**
 * Creates a Hyperledger Fabric node on an Amazon Managed Blockchain network
 */
class HyperledgerFabricNode extends constructs.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // These cannot be readonly since they have to be set after construction
        // due the race condition documented in https://github.com/aws/aws-cdk/issues/18237.
        this.endpoint = '';
        this.eventEndpoint = '';
        // Collect metadata on the stack
        const region = cdk.Stack.of(this).region;
        // Populate instance variables from input properties, using defaults if values not provided
        if (typeof props === 'undefined')
            props = {};
        this.availabilityZone = props.availabilityZone ?? `${region}a`;
        this.instanceType = props.instanceType ?? InstanceType.BURSTABLE3_SMALL;
        this.enableChaincodeLogging = props.enableChaincodeLogging ?? true;
        this.enableNodeLogging = props.enableNodeLogging ?? true;
        this.networkId = scope.networkId;
        this.memberId = scope.memberId;
        // Ensure the parameters captured above are valid, so we don't
        // need to wait until deployment time to discover an error
        utilities.validateRegion(region);
        utilities.validateAvailabilityZone(region, this.availabilityZone);
        if (scope.networkEdition === network.NetworkEdition.STARTER && !exports.STARTER_INSTANCE_TYPES.includes(this.instanceType)) {
            const starterInstanceTypeList = exports.STARTER_INSTANCE_TYPES.join(', ');
            throw new Error(`Instance type in a starter network must be one of the following: ${starterInstanceTypeList}.`);
        }
        // Build out the Cloudformation construct for the network/member
        const node = new managedblockchain.CfnNode(this, 'Node', {
            networkId: this.networkId,
            memberId: this.memberId,
            nodeConfiguration: {
                availabilityZone: this.availabilityZone,
                instanceType: this.instanceType,
            },
        });
        // Capture data included in the Cloudformation output in instance variables
        this.nodeId = node.getAtt('NodeId').toString();
    }
    /**
     * Build out a list of HyperledgerFabricNode constructs given a list of input property
     * objects; additionally checks to ensure node count is supported given the network type
     */
    static constructNodes(scope, nodeProps) {
        // If no node configurations are provided, create one; the empty object
        // will be populated with defaults when passed to the node constructor
        if (typeof nodeProps === 'undefined')
            nodeProps = [{}];
        const starter = scope.networkEdition === network.NetworkEdition.STARTER;
        if (starter && nodeProps.length > 2) {
            throw new Error('A starter network can have at most 2 nodes per member.');
        }
        if (!starter && nodeProps.length > 3) {
            throw new Error('A standard network can have at most 3 nodes per member.');
        }
        // Construct the node list, using an index value in the identifier
        return Array.from(nodeProps.entries()).map(e => new HyperledgerFabricNode(scope, `Node${e[0]}`, e[1]));
    }
    /**
     * Configure logging for the node via SDK call; this function
     * should be merged back into the constructor once the race condition is solved
     */
    configureLogging(sdkCallPolicy) {
        // This call doesn't really need all the permissions its using in the
        // provided policy, but since the policy must be constructed all at once
        // this is the only way to do it effectively
        const logPublishingConfiguration = {
            Fabric: {
                ChaincodeLogs: {
                    Cloudwatch: { Enabled: this.enableChaincodeLogging },
                },
                PeerLogs: {
                    Cloudwatch: { Enabled: this.enableNodeLogging },
                },
            },
        };
        const configureNodeLogSdkCall = {
            service: 'ManagedBlockchain',
            action: 'updateNode',
            parameters: {
                NetworkId: this.networkId,
                MemberId: this.memberId,
                NodeId: this.nodeId,
                LogPublishingConfiguration: logPublishingConfiguration,
            },
            physicalResourceId: customresources.PhysicalResourceId.of('Id'),
        };
        new customresources.AwsCustomResource(this, 'ConfigureNodeLogResource', {
            policy: sdkCallPolicy,
            onCreate: configureNodeLogSdkCall,
            onUpdate: configureNodeLogSdkCall,
        });
    }
    /**
     * Populate the output properties that must be fetched via SDK call; this function
     * should be merged back into the constructor once the race condition is solved
     */
    fetchData(dataSdkCallPolicy) {
        // This call doesn't really need all the permissions its using in the
        // provided policy, but since the policy must be constructed all at once
        // this is the only way to do it effectively
        const nodeDataSdkCall = {
            service: 'ManagedBlockchain',
            action: 'getNode',
            parameters: { NetworkId: this.networkId, MemberId: this.memberId, NodeId: this.nodeId },
            physicalResourceId: customresources.PhysicalResourceId.of('Id'),
        };
        const nodeData = new customresources.AwsCustomResource(this, 'NodeDataResource', {
            policy: dataSdkCallPolicy,
            onCreate: nodeDataSdkCall,
            onUpdate: nodeDataSdkCall,
        });
        // Grab items out of the above return values and stick them in output properties
        this.endpoint = nodeData.getResponseField('Node.FrameworkAttributes.Fabric.PeerEndpoint');
        this.eventEndpoint = nodeData.getResponseField('Node.FrameworkAttributes.Fabric.PeerEventEndpoint');
    }
}
exports.HyperledgerFabricNode = HyperledgerFabricNode;
_a = JSII_RTTI_SYMBOL_1;
HyperledgerFabricNode[_a] = { fqn: "@cdklabs/cdk-hyperledger-fabric-network.HyperledgerFabricNode", version: "0.8.323" };
//# sourceMappingURL=data:application/json;base64,